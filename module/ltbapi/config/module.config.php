<?php
return array(
    'router' => array(
        'routes' => array(
            'ltbapi.rest.stack' => array(
                'type' => 'Segment',
                'options' => array(
                    'route' => '/stack[/:stack_code]',
                    'defaults' => array(
                        'controller' => 'ltbapi\\V2\\Rest\\Stack\\Controller',
                    ),
                ),
            ),
            'ltbapi.rest.embed' => array(
                'type' => 'Segment',
                'options' => array(
                    'route' => '/embed',
                    'defaults' => array(
                        'controller' => 'ltbapi\\V2\\Rest\\Embed\\Controller',
                    ),
                ),
            ),
            'ltbapi.rest.tag' => array(
                'type' => 'Segment',
                'options' => array(
                    'route' => '/tag[/:tag_id]',
                    'defaults' => array(
                        'controller' => 'ltbapi\\V2\\Rest\\Tag\\Controller',
                    ),
                ),
            ),
            'ltbapi.rpc.auth' => array(
                'type' => 'Segment',
                'options' => array(
                    'route' => '/auth[/:action]',
                    'constraints' => array(
                        'action' => '[a-zA-Z][a-zA-Z0-9_-]*',
                    ),
                    'defaults' => array(
                        'controller' => 'ltbapi\\V2\\Rpc\\Auth\\Controller',
                        'action' => 'auth',
                    ),
                ),
            ),
            'ltbapi.rest.sss_test' => array(
                'type' => 'Segment',
                'options' => array(
                    'route' => '/sss_test[/:sss_test_id]',
                    'defaults' => array(
                        'controller' => 'ltbapi\\V2\\Rest\\Sss_test\\Controller',
                    ),
                ),
            ),
            'ltbapi.rest.message' => array(
                'type' => 'Segment',
                'options' => array(
                    'route' => '/message[/:message_id]',
                    'defaults' => array(
                        'controller' => 'ltbapi\\V2\\Rest\\Message\\Controller',
                    ),
                ),
            ),
            'ltbapi.rest.favourite' => array(
                'type' => 'Segment',
                'options' => array(
                    'route' => '/favourite[/:fav_id]',
                    'defaults' => array(
                        'controller' => 'ltbapi\\V2\\Rest\\Favourite\\Controller',
                    ),
                ),
            ),
            'ltbapi.rest.profile' => array(
                'type' => 'Segment',
                'options' => array(
                    'route' => '/profile[/:profile_id]',
                    'defaults' => array(
                        'controller' => 'ltbapi\\V2\\Rest\\Profile\\Controller',
                    ),
                ),
            ),
            'ltbapi.rest.environment' => array(
                'type' => 'Segment',
                'options' => array(
                    'route' => '/environment[/:environment_subset]',
                    'defaults' => array(
                        'controller' => 'ltbapi\\V2\\Rest\\Environment\\Controller',
                    ),
                ),
            ),
            'ltbapi.rest.sss' => array(
                'type' => 'Segment',
                'options' => array(
                    'route' => '/sss[/:sss_id]',
                    'defaults' => array(
                        'controller' => 'ltbapi\\V2\\Rest\\SocialSemanticServer\\Controller',
                    ),
                ),
            ),
            'ltbapi.rpc.notify' => array(
                'type' => 'Segment',
                'options' => array(
                    'route' => '/notify',
                    'defaults' => array(
                        'controller' => 'ltbapi\\V2\\Rpc\\Notify\\Controller',
                        'action' => 'sendmail',
                    ),
                ),
            ),
            'ltbapi.rpc.debug' => array(
                'type' => 'Segment',
                'options' => array(
                    'route' => '/debug/[:action][/:id]',
                    'defaults' => array(
                        'controller' => 'ltbapi\\V2\\Rpc\\Debug\\Controller',
                        'action' => 'debug',
                    ),
                ),
            ),
            'ltbapi.rpc.show' => array(
                'type' => 'Segment',
                'options' => array(
                    'route' => '/show[/:stack_code][/:type]',
                    'defaults' => array(
                        'controller' => 'ltbapi\\V2\\Rpc\\Show\\Controller',
                        'action' => 'show',
                    ),
                ),
            ),
            'ltbapi.rpc.embedly' => array(
                'type' => 'Segment',
                'options' => array(
                    'route' => '/embedly/[:action]',
                    'defaults' => array(
                        'controller' => 'ltbapi\\V2\\Rpc\\Embedly\\Controller',
                        'action' => 'embed',
                    ),
                ),
            ),
            'ltbapi.rest.reference' => array(
                'type' => 'Segment',
                'options' => array(
                    'route' => '/reference[/:reference_id]',
                    'defaults' => array(
                        'controller' => 'ltbapi\\V2\\Rest\\Reference\\Controller',
                    ),
                ),
            ),
        ),
    ),
    'zf-versioning' => array(
        'uri' => array(
            0 => 'ltbapi.rest.stack',
            1 => 'ltbapi.rest.tile',
            2 => 'ltbapi.rest.embed',
            3 => 'ltbapi.rest.tag',
            4 => 'ltbapi.rpc.auth',
            5 => 'ltbapi.rest.sss_test',
            6 => 'ltbapi.rest.message',
            7 => 'ltbapi.rest.favourite',
            8 => 'ltbapi.rest.profile',
            9 => 'ltbapi.rest.environment',
            10 => 'ltbapi.rest.sss',
            11 => 'ltbapi.rpc.notify',
            12 => 'ltbapi.rpc.debug',
            13 => 'ltbapi.rpc.show',
            14 => 'ltbapi.rpc.embedly',
            15 => 'ltbapi.rest.reference',
        ),
        'default_version' => 2,
    ),
    'service_manager' => array(
        'factories' => array(
            'ltbapi\\V2\\Rest\\Stack\\StackResource' => 'ltbapi\\V2\\Rest\\Stack\\StackResourceFactory',
            'ltbapi\\V2\\Rest\\Embed\\EmbedResource' => 'ltbapi\\V2\\Rest\\Embed\\EmbedResourceFactory',
            'ltbapi\\V2\\Rest\\Tag\\TagResource' => 'ltbapi\\V2\\Rest\\Tag\\TagResourceFactory',
            'ltbapi\\V2\\Rest\\Sss_test\\Sss_testResource' => 'ltbapi\\V2\\Rest\\Sss_test\\Sss_testResourceFactory',
            'ltbapi\\V2\\Rest\\Message\\MessageResource' => 'ltbapi\\V2\\Rest\\Message\\MessageResourceFactory',
            'ltbapi\\V2\\Rest\\Favourite\\FavouriteResource' => 'ltbapi\\V2\\Rest\\Favourite\\FavouriteResourceFactory',
            'ltbapi\\V2\\Rest\\Profile\\ProfileResource' => 'ltbapi\\V2\\Rest\\Profile\\ProfileResourceFactory',
            'ltbapi\\V2\\Rest\\Environment\\EnvironmentResource' => 'ltbapi\\V2\\Rest\\Environment\\EnvironmentResourceFactory',
            'ltbapi\\V2\\Rest\\SocialSemanticServer\\SocialSemanticServerResource' => 'ltbapi\\V2\\Rest\\SocialSemanticServer\\SocialSemanticServerResourceFactory',
            'ltbapi\\V2\\Rest\\Reference\\ReferenceResource' => 'ltbapi\\V2\\Rest\\Reference\\ReferenceResourceFactory',
        ),
    ),
    'zf-rest' => array(
        'ltbapi\\V2\\Rest\\Stack\\Controller' => array(
            'listener' => 'ltbapi\\V2\\Rest\\Stack\\StackResource',
            'route_name' => 'ltbapi.rest.stack',
            'route_identifier_name' => 'stack_code',
            'collection_name' => 'stacks',
            'entity_http_methods' => array(
                0 => 'GET',
                1 => 'PATCH',
                2 => 'PUT',
                3 => 'DELETE',
            ),
            'collection_http_methods' => array(
                0 => 'GET',
                1 => 'POST',
                2 => 'DELETE',
            ),
            'collection_query_whitelist' => array(
                0 => 'name',
                1 => 'public',
                2 => 'stack_id',
                3 => 'stack_code',
                4 => 'owner_id',
                5 => 'owner_code',
                6 => 'description',
                7 => 'tags',
                8 => 'show_details',
                9 => 'show_tags',
                10 => 'favourites',
                11 => 'and',
                12 => 'my_tags',
                13 => 'terms',
                14 => 'test',
                15 => 'offset',
                16 => 'page_size',
                17 => 'author',
                18 => 'size',
                19 => 'mine',
            ),
            'page_size' => '28',
            'page_size_param' => '30',
            'entity_class' => 'ltbapi\\V2\\Rest\\Stack\\StackEntity',
            'collection_class' => 'ltbapi\\V2\\Rest\\Stack\\StackCollection',
            'service_name' => 'stack',
        ),
        'ltbapi\\V2\\Rest\\Embed\\Controller' => array(
            'listener' => 'ltbapi\\V2\\Rest\\Embed\\EmbedResource',
            'route_name' => 'ltbapi.rest.embed',
            'route_identifier_name' => 'url',
            'collection_name' => 'embed',
            'entity_http_methods' => array(),
            'collection_http_methods' => array(
                0 => 'GET',
            ),
            'collection_query_whitelist' => array(
                0 => 'url',
                1 => 'width',
                2 => 'height',
                3 => 'scheme',
            ),
            'page_size' => '25',
            'page_size_param' => '',
            'entity_class' => 'ltbapi\\V2\\Rest\\Embed\\EmbedEntity',
            'collection_class' => 'ltbapi\\V2\\Rest\\Embed\\EmbedCollection',
            'service_name' => 'embed',
        ),
        'ltbapi\\V2\\Rest\\Tag\\Controller' => array(
            'listener' => 'ltbapi\\V2\\Rest\\Tag\\TagResource',
            'route_name' => 'ltbapi.rest.tag',
            'route_identifier_name' => 'tag_id',
            'collection_name' => 'tags',
            'entity_http_methods' => array(
                0 => 'GET',
                1 => 'PATCH',
                2 => 'DELETE',
            ),
            'collection_http_methods' => array(
                0 => 'GET',
                1 => 'POST',
                2 => 'DELETE',
            ),
            'collection_query_whitelist' => array(
                0 => 'owner_id',
                1 => 'owner_code',
                2 => 'tag_txt',
                3 => 'tag_type',
                4 => 'entity_id',
                5 => 'return',
                6 => 'space',
            ),
            'page_size' => '25',
            'page_size_param' => '',
            'entity_class' => 'ltbapi\\V2\\Rest\\Tag\\TagEntity',
            'collection_class' => 'ltbapi\\V2\\Rest\\Tag\\TagCollection',
            'service_name' => 'tag',
        ),
        'ltbapi\\V2\\Rest\\Sss_test\\Controller' => array(
            'listener' => 'ltbapi\\V2\\Rest\\Sss_test\\Sss_testResource',
            'route_name' => 'ltbapi.rest.sss_test',
            'route_identifier_name' => 'sss_test_id',
            'collection_name' => 'sss_test',
            'entity_http_methods' => array(),
            'collection_http_methods' => array(
                0 => 'GET',
            ),
            'collection_query_whitelist' => array(
                0 => 'app',
                1 => 'label',
                2 => 'description',
                3 => 'entity_id',
                4 => 'descriptionShort',
                5 => 'descriptionTechnical',
                6 => 'downloads',
                7 => 'stack',
                8 => 'code',
                9 => 'labels',
                10 => 'forUser',
                11 => 'space',
                12 => 'entities',
                13 => 'startTime',
                14 => 'tag',
                15 => 'newlabel',
                16 => 'uuid',
                17 => 'entity',
                18 => 'search',
                19 => 'apps',
                20 => 'test',
            ),
            'page_size' => 25,
            'page_size_param' => null,
            'entity_class' => 'ltbapi\\V2\\Rest\\Sss_test\\Sss_testEntity',
            'collection_class' => 'ltbapi\\V2\\Rest\\Sss_test\\Sss_testCollection',
            'service_name' => 'sss_test',
        ),
        'ltbapi\\V2\\Rest\\Message\\Controller' => array(
            'listener' => 'ltbapi\\V2\\Rest\\Message\\MessageResource',
            'route_name' => 'ltbapi.rest.message',
            'route_identifier_name' => 'message_id',
            'collection_name' => 'messages',
            'entity_http_methods' => array(
                0 => 'GET',
                1 => 'PATCH',
                2 => 'PUT',
                3 => 'DELETE',
            ),
            'collection_http_methods' => array(
                0 => 'GET',
                1 => 'POST',
            ),
            'collection_query_whitelist' => array(
                0 => 'mess_id',
                1 => 'mess_type',
                2 => 'entity_id',
                3 => 'user_id',
                4 => 'owner_id',
                5 => 'status',
                6 => 'period',
                7 => 'subject',
                8 => 'content',
                9 => 'mess_code',
                10 => 'user_code',
                11 => 'entity_code',
                12 => 'list',
				13 => 'aggregate'
            ),
            'page_size' => 25,
            'page_size_param' => null,
            'entity_class' => 'ltbapi\\V2\\Rest\\Message\\MessageEntity',
            'collection_class' => 'ltbapi\\V2\\Rest\\Message\\MessageCollection',
            'service_name' => 'message',
        ),
        'ltbapi\\V2\\Rest\\Favourite\\Controller' => array(
            'listener' => 'ltbapi\\V2\\Rest\\Favourite\\FavouriteResource',
            'route_name' => 'ltbapi.rest.favourite',
            'route_identifier_name' => 'fav_id',
            'collection_name' => 'favourites',
            'entity_http_methods' => array(
                0 => 'DELETE',
            ),
            'collection_http_methods' => array(
                0 => 'GET',
                1 => 'POST',
                2 => 'DELETE',
                3 => 'PUT',
            ),
            'collection_query_whitelist' => array(
                0 => 'user_id',
                1 => 'user_code',
                2 => 'entity_id',
                3 => 'entity_code',
                4 => 'fav_type',
            ),
            'page_size' => 25,
            'page_size_param' => null,
            'entity_class' => 'ltbapi\\V2\\Rest\\Favourite\\FavouriteEntity',
            'collection_class' => 'ltbapi\\V2\\Rest\\Favourite\\FavouriteCollection',
            'service_name' => 'favourite',
        ),
        'ltbapi\\V2\\Rest\\Profile\\Controller' => array(
            'listener' => 'ltbapi\\V2\\Rest\\Profile\\ProfileResource',
            'route_name' => 'ltbapi.rest.profile',
            'route_identifier_name' => 'profile_id',
            'collection_name' => 'profiles',
            'entity_http_methods' => array(
                0 => 'GET',
                1 => 'PATCH',
                2 => 'PUT',
                3 => 'DELETE',
            ),
            'collection_http_methods' => array(
                0 => 'GET',
                1 => 'POST',
            ),
            'collection_query_whitelist' => array(
                0 => 'profid',
                1 => 'user_id',
                2 => 'user_code',
                3 => 'name',
                4 => 'surname',
                5 => 'profile_code',
                6 => 'prof_nr',
                7 => 'partic_nr',
                8 => 'course_nr',
                9 => 'email',
                10 => 'stack_code',
            ),
            'page_size' => 25,
            'page_size_param' => null,
            'entity_class' => 'ltbapi\\V2\\Rest\\Profile\\ProfileEntity',
            'collection_class' => 'ltbapi\\V2\\Rest\\Profile\\ProfileCollection',
            'service_name' => 'profile',
        ),
        'ltbapi\\V2\\Rest\\Environment\\Controller' => array(
            'listener' => 'ltbapi\\V2\\Rest\\Environment\\EnvironmentResource',
            'route_name' => 'ltbapi.rest.environment',
            'route_identifier_name' => 'environment_subset',
            'collection_name' => 'environment',
            'entity_http_methods' => array(
                0 => 'GET',
            ),
            'collection_http_methods' => array(),
            'collection_query_whitelist' => array(),
            'page_size' => 25,
            'page_size_param' => null,
            'entity_class' => 'ltbapi\\V2\\Rest\\Environment\\EnvironmentEntity',
            'collection_class' => 'ltbapi\\V2\\Rest\\Environment\\EnvironmentCollection',
            'service_name' => 'environment',
        ),
        'ltbapi\\V2\\Rest\\SocialSemanticServer\\Controller' => array(
            'listener' => 'ltbapi\\V2\\Rest\\SocialSemanticServer\\SocialSemanticServerResource',
            'route_name' => 'ltbapi.rest.sss',
            'route_identifier_name' => 'sss_id',
            'collection_name' => 'entities',
            'entity_http_methods' => array(
                0 => 'GET',
            ),
            'collection_http_methods' => array(
                0 => 'GET',
            ),
            'collection_query_whitelist' => array(
                0 => 'type',
                1 => 'tags',
                2 => 'terms',
                3 => 'show_tags',
                4 => 'show_details',
                5 => 'and',
            ),
            'page_size' => 25,
            'page_size_param' => null,
            'entity_class' => 'ltbapi\\V2\\Rest\\SocialSemanticServer\\SocialSemanticServerEntity',
            'collection_class' => 'ltbapi\\V2\\Rest\\SocialSemanticServer\\SocialSemanticServerCollection',
            'service_name' => 'SocialSemanticServer',
        ),
        'ltbapi\\V2\\Rest\\Reference\\Controller' => array(
            'listener' => 'ltbapi\\V2\\Rest\\Reference\\ReferenceResource',
            'route_name' => 'ltbapi.rest.reference',
            'route_identifier_name' => 'reference_id',
            'collection_name' => 'reference',
            'entity_http_methods' => array(
                0 => 'GET',
                1 => 'PATCH',
                2 => 'PUT',
                3 => 'DELETE',
            ),
            'collection_http_methods' => array(
                0 => 'GET',
                1 => 'POST',
                2 => 'DELETE',
            ),
            'collection_query_whitelist' => array(
                0 => 'labels',
                1 => 'name',
                2 => 'type',
                3 => 'owner_name',
                4 => 'owner_id',
                5 => 'label',
                6 => 'reference_id',
                7 => 'reference_code',
                8 => 'file',
                9 => 'link',
                10 => 'public',
                11 => 'ref_type',
                12 => 'entity_code',
                13 => 'show_labels',
                14 => 'description',
                15 => 'owner_code',
                16 => 'terms',
                17 => 'page_size',
                18 => 'offset',
                19 => 'and',
                20 => 'url',
                21 => 'details',
                22 => 'image_url',
                23 => 'is_patch',
            ),
            'page_size' => 25,
            'page_size_param' => 'page_size',
            'entity_class' => 'ltbapi\\V2\\Rest\\Reference\\ReferenceEntity',
            'collection_class' => 'ltbapi\\V2\\Rest\\Reference\\ReferenceCollection',
            'service_name' => 'reference',
        ),
    ),
    'zf-content-negotiation' => array(
        'controllers' => array(
            'ltbapi\\V2\\Rest\\Stack\\Controller' => 'HalJson',
            'ltbapi\\V2\\Rest\\Embed\\Controller' => 'HalJson',
            'ltbapi\\V2\\Rest\\Tag\\Controller' => 'HalJson',
            'ltbapi\\V2\\Rest\\Sss_test\\Controller' => 'HalJson',
            'ltbapi\\V2\\Rest\\Message\\Controller' => 'HalJson',
            'ltbapi\\V2\\Rest\\Favourite\\Controller' => 'HalJson',
            'ltbapi\\V2\\Rest\\Profile\\Controller' => 'HalJson',
            'ltbapi\\V2\\Rest\\Environment\\Controller' => 'HalJson',
            'ltbapi\\V2\\Rest\\SocialSemanticServer\\Controller' => 'HalJson',
            'ltbapi\\V2\\Rpc\\Auth\\Controller' => 'Json',
            'ltbapi\\V2\\Rpc\\Notify\\Controller' => 'Json',
            'ltbapi\\V2\\Rpc\\Debug\\Controller' => 'Json',
            'ltbapi\\V2\\Rpc\\Show\\Controller' => 'Json',
            'ltbapi\\V2\\Rpc\\Embedly\\Controller' => 'Json',
            'ltbapi\\V2\\Rest\\Reference\\Controller' => 'HalJson',
        ),
        'accept_whitelist' => array(
            'ltbapi\\V2\\Rest\\Stack\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/hal+json',
                2 => 'application/json',
            ),
            'ltbapi\\V2\\Rest\\Embed\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/hal+json',
                2 => 'application/json',
            ),
            'ltbapi\\V2\\Rest\\Tag\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/hal+json',
                2 => 'application/json',
            ),
            'ltbapi\\V2\\Rpc\\Auth\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/json',
                2 => 'application/*+json',
            ),
            'ltbapi\\V2\\Rest\\Sss_test\\Controller' => array(
                0 => 'application/vnd.ltbapi.v3+json',
                1 => 'application/hal+json',
                2 => 'application/json',
            ),
            'ltbapi\\V2\\Rest\\Message\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/hal+json',
                2 => 'application/json',
            ),
            'ltbapi\\V2\\Rest\\Favourite\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/hal+json',
                2 => 'application/json',
            ),
            'ltbapi\\V2\\Rest\\Profile\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/hal+json',
                2 => 'application/json',
            ),
            'ltbapi\\V2\\Rest\\Environment\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/hal+json',
                2 => 'application/json',
            ),
            'ltbapi\\V2\\Rest\\SocialSemanticServer\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/hal+json',
                2 => 'application/json',
            ),
            'ltbapi\\V2\\Rpc\\Notify\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/json',
            ),
            'ltbapi\\V2\\Rpc\\Debug\\Controller' => array(
                0 => 'application/json',
                1 => 'application/*+json',
            ),
            'ltbapi\\V2\\Rpc\\Show\\Controller' => array(
                0 => 'application/json',
            ),
            'ltbapi\\V2\\Rpc\\Embedly\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/json',
                2 => 'application/*+json',
            ),
            'ltbapi\\V2\\Rest\\Reference\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/hal+json',
                2 => 'application/json',
            ),
        ),
        'content_type_whitelist' => array(
            'ltbapi\\V2\\Rest\\Stack\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/json',
                2 => 'application/x-www-form-urlencoded',
            ),
            'ltbapi\\V2\\Rest\\Embed\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/json',
                2 => 'application/x-www-form-urlencoded',
            ),
            'ltbapi\\V2\\Rest\\Tag\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/json',
                2 => 'application/x-www-form-urlencoded',
            ),
            'ltbapi\\V2\\Rpc\\Auth\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/json',
            ),
            'ltbapi\\V2\\Rest\\Sss_test\\Controller' => array(
                0 => 'application/vnd.ltbapi.v3+json',
                1 => 'application/json',
                2 => 'application/x-www-form-urlencoded',
            ),
            'ltbapi\\V2\\Rest\\Message\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/json',
                2 => 'application/x-www-form-urlencoded',
            ),
            'ltbapi\\V2\\Rest\\Favourite\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/json',
                2 => 'application/x-www-form-urlencoded',
            ),
            'ltbapi\\V2\\Rest\\Profile\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/json',
                2 => 'application/x-www-form-urlencoded',
            ),
            'ltbapi\\V2\\Rest\\Environment\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/json',
            ),
            'ltbapi\\V2\\Rest\\SocialSemanticServer\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/json',
            ),
            'ltbapi\\V2\\Rpc\\Notify\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/json',
                2 => 'application/x-www-form-urlencoded',
            ),
            'ltbapi\\V2\\Rpc\\Debug\\Controller' => array(
                0 => 'application/json',
            ),
            'ltbapi\\V2\\Rpc\\Show\\Controller' => array(
                0 => 'application/json',
            ),
            'ltbapi\\V2\\Rpc\\Embedly\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/json',
            ),
            'ltbapi\\V2\\Rest\\Reference\\Controller' => array(
                0 => 'application/vnd.ltbapi.v2+json',
                1 => 'application/json',
                2 => 'application/x-www-form-urlencoded',
                3 => 'multipart/form-data',
            ),
        ),
    ),
    'zf-hal' => array(
        'metadata_map' => array(
            'ltbapi\\V2\\Rest\\Stack\\StackEntity' => array(
                'entity_identifier_name' => 'stack_code',
                'route_name' => 'ltbapi.rest.stack',
                'route_identifier_name' => 'stack_code',
                'hydrator' => 'Zend\\Stdlib\\Hydrator\\ArraySerializable',
            ),
            'ltbapi\\V2\\Rest\\Stack\\StackCollection' => array(
                'entity_identifier_name' => 'stack_code',
                'route_name' => 'ltbapi.rest.stack',
                'route_identifier_name' => 'stack_code',
                'is_collection' => true,
            ),
            'ltbapi\\V2\\Rest\\Embed\\EmbedEntity' => array(
                'entity_identifier_name' => 'id',
                'route_name' => 'ltbapi.rest.embed',
                'route_identifier_name' => 'url',
                'hydrator' => 'Zend\\Stdlib\\Hydrator\\ArraySerializable',
            ),
            'ltbapi\\V2\\Rest\\Embed\\EmbedCollection' => array(
                'entity_identifier_name' => 'id',
                'route_name' => 'ltbapi.rest.embed',
                'route_identifier_name' => 'url',
                'is_collection' => true,
            ),
            'ltbapi\\V2\\Rest\\Tag\\TagEntity' => array(
                'entity_identifier_name' => 'tag_id',
                'route_name' => 'ltbapi.rest.tag',
                'route_identifier_name' => 'tag_id',
                'hydrator' => 'Zend\\Stdlib\\Hydrator\\ArraySerializable',
            ),
            'ltbapi\\V2\\Rest\\Tag\\TagCollection' => array(
                'entity_identifier_name' => 'tag_id',
                'route_name' => 'ltbapi.rest.tag',
                'route_identifier_name' => 'tag_id',
                'is_collection' => true,
            ),
            'ltbapi\\V2\\Rest\\Sss_test\\Sss_testEntity' => array(
                'entity_identifier_name' => 'id',
                'route_name' => 'ltbapi.rest.sss_test',
                'route_identifier_name' => 'sss_test_id',
                'hydrator' => 'Zend\\Stdlib\\Hydrator\\ArraySerializable',
            ),
            'ltbapi\\V2\\Rest\\Sss_test\\Sss_testCollection' => array(
                'entity_identifier_name' => 'id',
                'route_name' => 'ltbapi.rest.sss_test',
                'route_identifier_name' => 'sss_test_id',
                'is_collection' => true,
            ),
            'ltbapi\\V2\\Rest\\Message\\MessageEntity' => array(
                'entity_identifier_name' => 'mess_id',
                'route_name' => 'ltbapi.rest.message',
                'route_identifier_name' => 'message_id',
                'hydrator' => 'Zend\\Stdlib\\Hydrator\\ArraySerializable',
            ),
            'ltbapi\\V2\\Rest\\Message\\MessageCollection' => array(
                'entity_identifier_name' => 'mess_id',
                'route_name' => 'ltbapi.rest.message',
                'route_identifier_name' => 'message_id',
                'is_collection' => true,
            ),
            'ltbapi\\V2\\Rest\\Favourite\\FavouriteEntity' => array(
                'entity_identifier_name' => 'fav_id',
                'route_name' => 'ltbapi.rest.favourite',
                'route_identifier_name' => 'fav_id',
                'hydrator' => 'Zend\\Stdlib\\Hydrator\\ArraySerializable',
            ),
            'ltbapi\\V2\\Rest\\Favourite\\FavouriteCollection' => array(
                'entity_identifier_name' => 'fav_id',
                'route_name' => 'ltbapi.rest.favourite',
                'route_identifier_name' => 'fav_id',
                'is_collection' => true,
            ),
            'ltbapi\\V2\\Rest\\Profile\\ProfileEntity' => array(
                'entity_identifier_name' => 'profiid',
                'route_name' => 'ltbapi.rest.profile',
                'route_identifier_name' => 'profile_id',
                'hydrator' => 'Zend\\Stdlib\\Hydrator\\ArraySerializable',
            ),
            'ltbapi\\V2\\Rest\\Profile\\ProfileCollection' => array(
                'entity_identifier_name' => 'profiid',
                'route_name' => 'ltbapi.rest.profile',
                'route_identifier_name' => 'profile_id',
                'is_collection' => true,
            ),
            'ltbapi\\V2\\Rest\\Environment\\EnvironmentEntity' => array(
                'entity_identifier_name' => 'id',
                'route_name' => 'ltbapi.rest.environment',
                'route_identifier_name' => 'environment_subset',
                'hydrator' => 'Zend\\Stdlib\\Hydrator\\ArraySerializable',
            ),
            'ltbapi\\V2\\Rest\\Environment\\EnvironmentCollection' => array(
                'entity_identifier_name' => 'id',
                'route_name' => 'ltbapi.rest.environment',
                'route_identifier_name' => 'environment_subset',
                'is_collection' => true,
            ),
            'ltbapi\\V2\\Rest\\SocialSemanticServer\\SocialSemanticServerEntity' => array(
                'entity_identifier_name' => 'id',
                'route_name' => 'ltbapi.rest.sss',
                'route_identifier_name' => 'SocialSemanticServer_id',
                'hydrator' => 'Zend\\Stdlib\\Hydrator\\ArraySerializable',
            ),
            'ltbapi\\V2\\Rest\\SocialSemanticServer\\SocialSemanticServerCollection' => array(
                'entity_identifier_name' => 'id',
                'route_name' => 'ltbapi.rest.sss',
                'route_identifier_name' => 'sss_id',
                'is_collection' => true,
            ),
            'ltbapi\\V2\\Rest\\Reference\\ReferenceEntity' => array(
                'entity_identifier_name' => 'reference_code',
                'route_name' => 'ltbapi.rest.reference',
                'route_identifier_name' => 'reference_id',
                'hydrator' => 'Zend\\Stdlib\\Hydrator\\ArraySerializable',
            ),
            'ltbapi\\V2\\Rest\\Reference\\ReferenceCollection' => array(
                'entity_identifier_name' => 'reference_id',
                'route_name' => 'ltbapi.rest.reference',
                'route_identifier_name' => 'reference_id',
                'is_collection' => true,
            ),
        ),
    ),
    'zf-content-validation' => array(
        'ltbapi\\V2\\Rest\\Stack\\Controller' => array(
            'input_filter' => 'ltbapi\\V2\\Rest\\Stack\\Validator',
            'DELETE' => 'ltbapi\\V2\\Rest\\Stack\\DeleteValidator',
        ),
        'ltbapi\\V2\\Rest\\Embed\\Controller' => array(
            'input_filter' => 'ltbapi\\V2\\Rest\\Embed\\Validator',
        ),
        'ltbapi\\V2\\Rest\\Tag\\Controller' => array(
            'input_filter' => 'ltbapi\\V2\\Rest\\Tag\\Validator',
            'PATCH' => 'ltbapi\\V2\\Rest\\Tag\\PatchValidator',
        ),
        'ltbapi\\V2\\Rest\\Message\\Controller' => array(
            'input_filter' => 'ltbapi\\V2\\Rest\\Message\\Validator',
            'PATCH' => 'ltbapi\\V2\\Rest\\Message\\PatchValidator',
        ),
        'ltbapi\\V2\\Rest\\Favourite\\Controller' => array(
            'input_filter' => 'ltbapi\\V2\\Rest\\Favourite\\Validator',
        ),
        'ltbapi\\V2\\Rest\\Profile\\Controller' => array(
            'input_filter' => 'ltbapi\\V2\\Rest\\Profile\\Validator',
        ),
        'ltbapi\\V2\\Rpc\\Notify\\Controller' => array(
            'input_filter' => 'ltbapi\\V2\\Rpc\\Notify\\Validator',
        ),
        'ltbapi\\V2\\Rpc\\Debug\\Controller' => array(
            'input_filter' => 'ltbapi\\V2\\Rpc\\Debug\\Validator',
        ),
        'ltbapi\\V2\\Rpc\\Show\\Controller' => array(
            'input_filter' => 'ltbapi\\V2\\Rpc\\Show\\Validator',
        ),
        'ltbapi\\V2\\Rpc\\Embedly\\Controller' => array(
            'input_filter' => 'ltbapi\\V2\\Rpc\\Embedly\\Validator',
        ),
        'ltbapi\\V2\\Rest\\Reference\\Controller' => array(
            'input_filter' => 'ltbapi\\V2\\Rest\\Reference\\Validator',
            'PATCH' => 'ltbapi\\V2\\Rest\\EmptyValidator',
            'PUT' => 'ltbapi\\V2\\Rest\\EmptyValidator',
        ),
    ),
    'input_filter_specs' => array(
        'ltbapi\\V2\\Rest\\EmptyValidator' => array(),
        'ltbapi\\V2\\Rest\\Stack\\Validator' => array(
            0 => array(
                'name' => 'name',
                'required' => '1',
                'error_message' => 'Every stack must at least have a name.',
                'filters' => array(),
                'validators' => array(),
                'description' => 'The name of the stack',
                'allow_empty' => '',
                'continue_if_empty' => '',
            ),
            1 => array(
                'name' => 'public',
                'required' => '',
                'filters' => array(),
                'validators' => array(),
                'description' => 'Can the stack be shown to other people than the owner only (default true)',
                'allow_empty' => '1',
                'continue_if_empty' => '1',
            ),
            2 => array(
                'name' => 'details',
                'required' => '1',
                'error_message' => 'Every stack must have a stack definition.',
                'filters' => array(),
                'validators' => array(),
                'description' => 'The definition of the stack in the form of a json string',
                'allow_empty' => '1',
                'continue_if_empty' => '',
            ),
            3 => array(
                'name' => 'description',
                'required' => '',
                'filters' => array(),
                'validators' => array(),
                'description' => 'The description of the stack',
                'allow_empty' => '1',
            ),
            4 => array(
                'name' => 'current_tags',
                'required' => '',
                'filters' => array(),
                'validators' => array(),
                'description' => 'The changed tags of the stack',
                'allow_empty' => '1',
            ),
            5 => array(
                'name' => 'my_tags',
                'required' => '',
                'filters' => array(),
                'validators' => array(),
                'description' => 'The tags of the current logged in user for this stack',
                'allow_empty' => '1',
            ),
            6 => array(
                'name' => 'mine',
                'required' => '',
                'filters' => array(),
                'validators' => array(),
                'description' => 'Force show only own stacks even for moderators',
                'allow_empty' => '1',
                'continue_if_empty' => '1',
            ),
        ),
        'ltbapi\\V2\\Rest\\Stack\\DeleteValidator' => array(
            0 => array(
                'name' => 'name',
                'required' => '1',
                'filters' => array(),
                'validators' => array(),
                'description' => 'The name of the stack',
                'allow_empty' => '',
                'continue_if_empty' => '',
            ),
        ),
        'ltbapi\\V2\\Rest\\Embed\\Validator' => array(
            0 => array(
                'name' => 'url',
                'required' => '1',
                'filters' => array(),
                'validators' => array(),
                'description' => 'The url with embeddable content',
                'allow_empty' => '',
                'continue_if_empty' => '',
            ),
            1 => array(
                'name' => 'width',
                'required' => '',
                'filters' => array(
                    0 => array(
                        'name' => 'Zend\\Filter\\Int',
                        'options' => array(),
                    ),
                ),
                'validators' => array(),
                'description' => 'maximum width of returned embed',
                'allow_empty' => '',
                'continue_if_empty' => '',
            ),
            2 => array(
                'name' => 'height',
                'required' => '',
                'filters' => array(
                    0 => array(
                        'name' => 'Zend\\Filter\\Int',
                        'options' => array(),
                    ),
                ),
                'validators' => array(),
                'description' => 'maximum height of returned embed',
                'allow_empty' => '',
                'continue_if_empty' => '',
            ),
            3 => array(
                'name' => 'scheme',
                'required' => '',
                'filters' => array(),
                'validators' => array(
                    0 => array(
                        'name' => 'Zend\\Validator\\Identical',
                        'options' => array(
                            'token' => 'http',
                        ),
                    ),
                    1 => array(
                        'name' => 'Zend\\Validator\\Identical',
                        'options' => array(
                            'token' => 'https',
                        ),
                    ),
                ),
                'description' => 'Should we get the resources by ssl (https) or by plain http?',
                'allow_empty' => '1',
                'continue_if_empty' => '1',
                'error_message' => 'The scheme can only be http or https, if omitted, it will be http',
            ),
        ),
        'ltbapi\\V2\\Rest\\Tag\\Validator' => array(
            0 => array(
                'name' => 'entity_id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
                'description' => 'The int id of the stack or tile or whatever',
            ),
            1 => array(
                'name' => 'owner_id',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => true,
                'continue_if_empty' => true,
            ),
            2 => array(
                'name' => 'tag_txt',
                'required' => true,
                'filters' => array(),
                'validators' => array(
                    0 => array(
                        'name' => 'Zend\\Validator\\Regex',
                        'options' => array(
                            'pattern' => '/^[a-z]([a-z, \\,, \\s])*[a-z]$/',
                            'message' => 'Your tag string should consist of comma separated lowercase strings without special characters',
                        ),
                    ),
                ),
                'allow_empty' => false,
                'continue_if_empty' => false,
                'description' => 'The comma separated list of tags to add/update',
            ),
            3 => array(
                'name' => 'tag_id',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'continue_if_empty' => true,
                'allow_empty' => true,
                'description' => 'The serial id for this tag/id combination',
            ),
            4 => array(
                'name' => 'timestamp',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'continue_if_empty' => true,
                'allow_empty' => true,
            ),
            5 => array(
                'name' => 'tag_type',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
            ),
            6 => array(
                'name' => 'space',
                'required' => false,
                'filters' => array(),
                'validators' => array(
                    0 => array(
                        'name' => 'Zend\\Validator\\InArray',
                        'options' => array(
                            'haystack' => array(
                                0 => 'sharedSpace',
                                1 => 'privateSpace',
                            ),
                            'message' => 'This option is always one of the two sharedSpace or privateSpace',
                        ),
                    ),
                ),
                'description' => 'This can be either sharedSpace or privateSpace. Default is the first',
                'allow_empty' => true,
                'continue_if_empty' => true,
            ),
        ),
        'ltbapi\\V2\\Rest\\Tag\\PatchValidator' => array(
            0 => array(
                'name' => 'tag_txt',
                'required' => '1',
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => '',
                'continue_if_empty' => '',
            ),
        ),
        'ltbapi\\V2\\Rest\\Message\\PatchValidator' => array(
            0 => array(
                'name' => 'mess_type',
                'required' => false,
                'filters' => array(),
                'validators' => array(
                    0 => array(
                        'name' => 'Zend\\Validator\\InArray',
                        'options' => array(
                            'haystack' => array(
                                0 => 'user',
                                1 => 'stack',
                            ),
                            'message' => 'This option is always one of the two user or stack',
                        ),
                    ),
                ),
                'allow_empty' => false,
                'continue_if_empty' => false,
                'description' => 'Can be \'user\' or \'stack\' indicating the messages if for a specific user or for all users of this stack',
            ),
            1 => array(
                'name' => 'start',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
                'description' => 'The start date of the message, expressed in a Unix timestamp',
                'error_message' => 'The start date is required and can be provided as string yyyy-mm-dd or as a Unix timestamp',
            ),
            2 => array(
                'name' => 'end',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
                'description' => 'The end date of the message, expressed in a Unix timestamp',
                'error_message' => 'The end date must be provided',
            ),
            3 => array(
                'name' => 'status',
                'required' => false,
                'filters' => array(
                    0 => array(
                        'name' => 'Zend\\Filter\\StringToLower',
                        'options' => array(),
                    ),
                ),
                'validators' => array(
                    0 => array(
                        'name' => 'Zend\\Validator\\InArray',
                        'options' => array(
                            'haystack' => array(
                                0 => 'new',
                                1 => 'read',
                                2 => 'all',
                            ),
                            'message' => 'When provided, the only permitted values are: new, read, all.',
                        ),
                    ),
                ),
                'description' => 'The status of the message. Can be new or read. Default is new.',
                'allow_empty' => true,
                'continue_if_empty' => true,
                'error_message' => 'The status can only be set to read or new. Further only used in queries.',
            ),
            4 => array(
                'name' => 'entity_id',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
            ),
            5 => array(
                'name' => 'user_id',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
            ),
            6 => array(
                'name' => 'subject',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => true,
                'continue_if_empty' => false,
            ),
            7 => array(
                'name' => 'content',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
            ),
            8 => array(
                'name' => 'entity_code',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'description' => 'An equivalent for the entity_id',
            ),
            9 => array(
                'name' => 'user_code',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'description' => 'The code unique for the user',
            ),
        ),
        'ltbapi\\V2\\Rest\\Message\\Validator' => array(
            0 => array(
                'name' => 'mess_id',
                'required' => false,
                'filters' => array(
                    0 => array(
                        'name' => 'Zend\\Filter\\ToInt',
                        'options' => array(),
                    ),
                ),
                'validators' => array(),
                'allow_empty' => true,
                'continue_if_empty' => true,
                'description' => 'Just the message id (an int)',
            ),
            1 => array(
                'name' => 'mess_type',
                'required' => false,
                'filters' => array(),
                'validators' => array(
                    0 => array(
                        'name' => 'Zend\\Validator\\InArray',
                        'options' => array(
                            'haystack' => array(
                                0 => 'user',
                                1 => 'stack',
                            ),
                            'message' => 'This option is always one of the two user or stack',
                        ),
                    ),
                ),
                'allow_empty' => false,
                'continue_if_empty' => false,
                'description' => 'Can be \'user\' or \'stack\' indicating the messages if for a specific user or for all users of this stack',
            ),
            2 => array(
                'name' => 'start',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => true,
                'continue_if_empty' => false,
                'description' => 'The start date of the message, expressed in a Unix timestamp',
                'error_message' => 'The start date is required and can be provided as string yyyy-mm-dd or as a Unix timestamp',
            ),
            3 => array(
                'name' => 'end',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => true,
                'continue_if_empty' => false,
                'description' => 'The end date of the message, expressed in a Unix timestamp',
                'error_message' => 'The end date must be provided',
            ),
            4 => array(
                'name' => 'status',
                'required' => false,
                'filters' => array(
                    0 => array(
                        'name' => 'Zend\\Filter\\StringToLower',
                        'options' => array(),
                    ),
                ),
                'validators' => array(
                    0 => array(
                        'name' => 'Zend\\Validator\\InArray',
                        'options' => array(
                            'haystack' => array(
                                0 => 'new',
                                1 => 'read',
                                2 => 'all',
                            ),
                            'message' => 'When provided, the only permitted values are: new, read, all.',
                        ),
                    ),
                ),
                'description' => 'The status of the message. Can be new or read. Default is new. One can also pass \'all\' to not make this distinction.',
                'allow_empty' => true,
                'continue_if_empty' => false,
                'error_message' => 'The status can be set to read. Further only used in queries. Otherwise the status will be ignored. At the moment only permitted values are new and read (and \'all\')',
            ),
            5 => array(
                'name' => 'mess_code',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
            ),
            6 => array(
                'name' => 'entity_id',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
            ),
            7 => array(
                'name' => 'user_id',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
            ),
            8 => array(
                'name' => 'owner_id',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
            ),
            9 => array(
                'name' => 'subject',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => true,
                'continue_if_empty' => false,
            ),
            10 => array(
                'name' => 'content',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
            ),
            11 => array(
                'name' => 'entity_code',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'description' => 'An equivalent for the entity_id',
                'allow_empty' => false,
                'continue_if_empty' => false,
            ),
            12 => array(
                'name' => 'user_code',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'description' => 'The code unique for the user',
                'allow_empty' => false,
                'continue_if_empty' => false,
            ),
        ),
        'ltbapi\\V2\\Rest\\Favourite\\Validator' => array(
            0 => array(
                'name' => 'entity_id',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'description' => 'The id of the entity you want to mark as favourite',
                'allow_empty' => false,
                'continue_if_empty' => false,
            ),
            1 => array(
                'name' => 'entity_code',
                'required' => false,
                'filters' => array(
                    0 => array(
                        'name' => 'Zend\\Filter\\StringTrim',
                        'options' => array(),
                    ),
                ),
                'validators' => array(),
                'description' => 'The code corresponding to the entity to be marked as favourite',
                'allow_empty' => false,
                'continue_if_empty' => false,
            ),
            2 => array(
                'name' => 'fav_type',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
                'description' => 'One could specify the type of favourite. Default is stack, so this parameter is optional for the moment',
            ),
        ),
        'ltbapi\\V2\\Rest\\Profile\\Validator' => array(
            0 => array(
                'name' => 'user_id',
                'required' => false,
                'filters' => array(
                    0 => array(
                        'name' => 'Zend\\Filter\\Int',
                        'options' => array(),
                    ),
                ),
                'validators' => array(),
                'allow_empty' => true,
                'continue_if_empty' => true,
                'description' => 'The local id to identify the user',
            ),
            1 => array(
                'name' => 'user_code',
                'required' => false,
                'filters' => array(
                    0 => array(
                        'name' => 'Zend\\Filter\\StringTrim',
                        'options' => array(),
                    ),
                ),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
                'description' => 'The code describing the user',
                'error_message' => 'When provided, it should be a valid user code representing the user id',
            ),
            2 => array(
                'name' => 'name',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
                'description' => 'The name of the person',
            ),
            3 => array(
                'name' => 'surname',
                'required' => false,
                'filters' => array(
                    0 => array(
                        'name' => 'Zend\\I18n\\Filter\\Alpha',
                        'options' => array(),
                    ),
                ),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
                'description' => 'The surname of the person',
            ),
            4 => array(
                'name' => 'birthday',
                'required' => false,
                'allow_empty' => false,
                'continue_if_empty' => false,
                'description' => 'A valid date',
                'error_message' => 'This must be a valid date',
            ),
            5 => array(
                'name' => 'prof_nr',
                'required' => false,
                'filters' => array(
                    0 => array(
                        'name' => 'Zend\\Filter\\Digits',
                        'options' => array(),
                    ),
                ),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
                'description' => 'The Profession no',
            ),
            6 => array(
                'name' => 'prof_nr_sub',
                'required' => false,
                'filters' => array(),
                'validators' => array(
                    0 => array(
                        'name' => 'Zend\\Validator\\Digits',
                        'options' => array(),
                    ),
                ),
                'allow_empty' => true,
                'continue_if_empty' => true,
                'description' => 'Not used at the moment. Defaults to 0',
            ),
            7 => array(
                'name' => 'partic_nr',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
            ),
            8 => array(
                'name' => 'course_nr',
                'required' => false,
                'filters' => array(
                    0 => array(
                        'name' => 'Zend\\Filter\\Digits',
                        'options' => array(),
                    ),
                ),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
                'description' => 'The number of the course',
            ),
            9 => array(
                'name' => 'start_date',
                'required' => false,
                'filters' => array(),
                'validators' => array(
                    0 => array(
                        'name' => 'Zend\\I18n\\Validator\\DateTime',
                        'options' => array(
                            'pattern' => 'yyyy-mm-dd',
                        ),
                    ),
                ),
                'allow_empty' => false,
                'continue_if_empty' => false,
                'description' => 'The date of start of apprenticeship',
            ),
            10 => array(
                'name' => 'end_date',
                'required' => false,
                'filters' => array(),
                'validators' => array(
                    0 => array(
                        'name' => 'Zend\\I18n\\Validator\\DateTime',
                        'options' => array(
                            'pattern' => 'yyyy-mm-dd',
                        ),
                    ),
                ),
                'allow_empty' => false,
                'continue_if_empty' => false,
                'description' => 'Date of completing the apprenticeship',
            ),
            11 => array(
                'name' => 'email',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
            ),
            12 => array(
                'name' => 'stack_code',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
                'allow_empty' => false,
                'continue_if_empty' => false,
                'description' => 'What stack should be shown by default',
            ),
        ),
        'ltbapi\\V2\\Rpc\\Notify\\Validator' => array(
            0 => array(
                'required' => true,
                'validators' => array(),
                'filters' => array(),
                'name' => 'subject',
                'description' => 'The subject of the notification',
                'error_message' => 'The subject is required',
            ),
            1 => array(
                'required' => true,
                'validators' => array(),
                'filters' => array(),
                'name' => 'message',
                'error_message' => 'The message body is required',
                'description' => 'The body of the message',
            ),
            2 => array(
                'required' => false,
                'validators' => array(),
                'filters' => array(),
                'name' => 'type',
                'description' => 'The type of notification. Default is sendmail.',
            ),
            3 => array(
                'required' => false,
                'validators' => array(),
                'filters' => array(),
                'name' => 'c_type',
                'description' => 'The type of the message. Default is plain, but it can be html.',
            ),
        ),
        'ltbapi\\V2\\Rpc\\Debug\\Validator' => array(
            0 => array(
                'required' => false,
                'validators' => array(),
                'filters' => array(),
                'name' => 'message',
                'description' => 'The message of the debug console',
                'allow_empty' => true,
                'error_message' => 'You should specify some message for every console and to give a name to your session',
            ),
            1 => array(
                'required' => false,
                'validators' => array(),
                'filters' => array(),
                'name' => 'value1',
                'description' => 'Some value that will be stored',
            ),
            2 => array(
                'required' => false,
                'validators' => array(),
                'filters' => array(),
                'name' => 'value2',
            ),
            3 => array(
                'required' => false,
                'validators' => array(),
                'filters' => array(),
                'name' => 'value3',
            ),
            4 => array(
                'required' => false,
                'validators' => array(),
                'filters' => array(),
                'name' => 'app',
                'description' => 'Indicates whether the console comes from the app or not',
                'error_message' => 'Specify a value 1 or 0 to indicate whether you are in an app',
            ),
            5 => array(
                'required' => false,
                'validators' => array(),
                'filters' => array(),
                'name' => 'version',
                'description' => 'The version of the app or the tilestore',
            ),
            6 => array(
                'required' => false,
                'validators' => array(),
                'filters' => array(),
                'name' => 'verify_code',
                'description' => 'To start a debug session, a verify code is necessary',
            ),
            7 => array(
                'required' => false,
                'validators' => array(),
                'filters' => array(),
                'name' => 'debug_code',
                'description' => 'To use a debug session to store new records, a debug code is necessary',
            ),
        ),
        'ltbapi\\V2\\Rpc\\Show\\Validator' => array(
            0 => array(
                'required' => true,
                'validators' => array(),
                'filters' => array(),
                'name' => 'stack_code',
                'description' => 'The stack to show',
                'error_message' => 'A stack code is required',
            ),
            1 => array(
                'required' => false,
                'validators' => array(),
                'filters' => array(),
                'name' => 'type',
                'description' => 'A type of the entity to show',
            ),
        ),
        'ltbapi\\V2\\Rpc\\Embedly\\Validator' => array(
            0 => array(
                'required' => true,
                'validators' => array(),
                'filters' => array(),
                'name' => 'action',
                'description' => 'Can be either embed or extract',
            ),
        ),
        'ltbapi\\V2\\Rest\\Reference\\Validator' => array(
            0 => array(
                'required' => false,
                'validators' => array(),
                'filters' => array(),
                'name' => 'reference_id',
                'description' => 'The actual id of the reference',
            ),
            1 => array(
                'required' => false,
                'validators' => array(),
                'filters' => array(),
                'name' => 'name',
                'description' => 'Some alternative name for the file or link. This needn\'t be the actual fiflename but it will be assigned that value',
            ),
            2 => array(
                'required' => false,
                'validators' => array(),
                'filters' => array(),
                'name' => 'description',
                'description' => 'Some description of the file or link',
            ),
            3 => array(
                'required' => true,
                'validators' => array(),
                'filters' => array(),
                'name' => 'ref_type',
                'description' => 'The type. Can be either a link or file',
            ),
            4 => array(
                'required' => false,
                'validators' => array(),
                'filters' => array(),
                'name' => 'file',
                'type' => 'Zend\\InputFilter\\FileInput',
                'description' => 'a File upload field',
            ),
            5 => array(
                'required' => false,
                'validators' => array(),
                'filters' => array(),
                'name' => 'link',
                'description' => 'Some url',
            ),
            6 => array(
                'required' => false,
                'validators' => array(),
                'filters' => array(),
                'name' => 'label',
                'description' => 'You can change the labels of a reference later on',
            ),
            7 => array(
                'required' => false,
                'validators' => array(),
                'filters' => array(),
                'name' => 'labels',
                'description' => 'You can change the labels of a reference later on',
            ),
            8 => array(
                'required' => true,
                'validators' => array(),
                'filters' => array(),
                'name' => 'entity_code',
                'description' => 'What is the stack this ref is connected to',
            ),
            9 => array(
                'required' => false,
                'validators' => array(),
                'filters' => array(),
                'name' => 'public',
                'description' => 'Is the reference public or private',
            ),
            10 => array(
                'required' => false,
                'validators' => array(),
                'filters' => array(),
                'name' => 'details',
                'description' => 'embedly details',
            ),
        ),
    ),
    'controllers' => array(
        'factories' => array(
            'ltbapi\\V2\\Rpc\\Auth\\Controller' => 'ltbapi\\V2\\Rpc\\Auth\\AuthControllerFactory',
            'ltbapi\\V2\\Rpc\\Notify\\Controller' => 'ltbapi\\V2\\Rpc\\Notify\\NotifyControllerFactory',
            'ltbapi\\V2\\Rpc\\Debug\\Controller' => 'ltbapi\\V2\\Rpc\\Debug\\DebugControllerFactory',
            'ltbapi\\V2\\Rpc\\Show\\Controller' => 'ltbapi\\V2\\Rpc\\Show\\ShowControllerFactory',
            'ltbapi\\V2\\Rpc\\Embedly\\Controller' => 'ltbapi\\V2\\Rpc\\Embedly\\EmbedlyControllerFactory',
        ),
    ),
    'zf-rpc' => array(
        'ltbapi\\V2\\Rpc\\Auth\\Controller' => array(
            'service_name' => 'auth',
            'http_methods' => array(
                0 => 'GET',
            ),
            'route_name' => 'ltbapi.rpc.auth',
        ),
        'ltbapi\\V2\\Rpc\\Notify\\Controller' => array(
            'service_name' => 'notify',
            'http_methods' => array(
                0 => 'POST',
            ),
            'route_name' => 'ltbapi.rpc.notify',
        ),
        'ltbapi\\V2\\Rpc\\Debug\\Controller' => array(
            'service_name' => 'debug',
            'http_methods' => array(
                0 => 'GET',
                1 => 'POST',
                2 => 'DELETE',
            ),
            'route_name' => 'ltbapi.rpc.debug',
        ),
        'ltbapi\\V2\\Rpc\\Show\\Controller' => array(
            'service_name' => 'show',
            'http_methods' => array(
                0 => 'GET',
            ),
            'route_name' => 'ltbapi.rpc.show',
        ),
        'ltbapi\\V2\\Rpc\\Embedly\\Controller' => array(
            'service_name' => 'embedly',
            'http_methods' => array(
                0 => 'GET',
            ),
            'route_name' => 'ltbapi.rpc.embedly',
        ),
    ),
);
